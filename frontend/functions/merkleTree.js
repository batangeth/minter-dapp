const { MerkleTree } = require('merkletreejs');
const keccak256 = require('keccak256');

exports.handler = async (event, context) => {
  let whitelistAddresses = [
    "0xb4a9391C658bc1d5a4fd7928c5306d16046141f8",
    "0x17Ca3D67b7AD32a3c83bAd88b509AE3D8C8371c4",
    "0x7Cf8B7cB6928EB879C8024BA8c172F11d8871E6B",
    "0xF023A7D4a47CE0858F2883797B8158A02d8f263d",
    "0x0aEcd559e4BDF2157d0bF0380E20dAd0535Df37D",
    "0x31BBc38d8602A263A0cd6Ed250465d967D128DdE",
    "0x3325fc09199Bb9545fFF89a7dAbC040bF13e61f0",
    "0xFB4fDB8Ae3FD14391C094880bdf6b8e271a71820",
    "0x586C0EbbBa2bD7f8097Cba69FD79fdcF6210DD6B",
    "0x472Fea5b208bed2fAD3C2C3547c850649E7Dab68",
    "0xEa2da295eC19A26eD331de9810F2a5a0A0e731E0",
    "0x28bB7D807F791407Cf140A7b004aaff3424CBB32",
    "0xE121587EEce1Ae370e83909D94Ee3C079eE9CD14",
    "0xF7cF8959A739Df34C89e4F49850950e127f6DE2C",
    "0xdB02EA6FF7b379BF96f656cbf4bb6170e138f575",
    "0xEf70cC2E73Fe86E35A998dC34672f71Cb1E0f06c",
    "0x178f0fa955B44Df40F2b91B1423AFe19bc8D41DE",
    "0x70FBbe6cd8C4B447a6386aFE9fc5fe9D19a24EF0",
    "0xeCb013597eAa1B067Fa2510056c04498bDC3910a",
    "0xe18C16cBae5659009B25a74b5019599f5B2A7810",
    "0xfD04895dd62272fc29e5B6bdAfD7Ec9AA7BdB94E",
    "0x32029DBC69baBc56eF10f5451Db10d4Ac896197B",
    "0xB46484D69e2c896665dc155Ce11F71f448FFc2c1",
    "0x25c3BA1aeF1De028D3f323c8Ce600ebB6B325a11",
    "0x094175372ad808373a6207e943F613D5d46cAA5e",
    "0xc6FD3c9D20082314731C855C33506Bd253A92072",
    "0xD88Ac670b02FD4Dba3D377195e7134712eC78a56",
    "0x9E1304D832506867A4Eb693E904f0b04669C1230",
    "0x70FBbe6cd8C4B447a6386aFE9fc5fe9D19a24EF0",
    "0x26C3861DE2b046Fa242a9f961Cfe5D51E6716744",
    "0x07D6d91a69E429DDf0505E20fEE5a431EFdD8067",
    "0x76feB375DbEa9965B05724584cD2867B22D846aC",
    "0x638Ea43DCcac59789bADc04272960cF2B3f9D466",
    "0xe18C16cBae5659009B25a74b5019599f5B2A7810",
    "0x0DD189818e5a1A50df7C9447A9561b441A034789",
    "0x9ac05a396190eE813B42f2E60aB1B2c615604f66",
    "0x0B5553aA7C28A31B15275735d18d38C3A245d2A7",
    "0xa2dE44d7a876A5683185872f63bC59D245745B18",
    "0xD2adAa9910c4616b07C5D5107C828FDB0de6a5f2",
    "0xc0aDfD5f3a2BAf464ed2B1599a6f5FDc9828782d",
    "0xE121587EEce1Ae370e83909D94Ee3C079eE9CD14",
    "0x05a1255Dfaa6b39181D4966C9AEA53C1f82dEcA7",
    "0xC565D109C19cc2004FEbF8E179cFF11bcfB43912",
    "0x8Be31Ff49c18C09664b06bAe8735cd10E31199Fe",
    "0x3325fc09199Bb9545fFF89a7dAbC040bF13e61f0",
    "0x0aEcd559e4BDF2157d0bF0380E20dAd0535Df37D",
    "0x69F5cF6d2eF6ff9a6766021D3d5A4FC123195466",
    "0x0651019855371420ceae6a31Cfe668eB653c9Fb3",
    "0x1aBd332a449Aa1b3073B6BD8D9556CFaa6fB94D6",
    "0x049F9B31d217d0E6ADeb81ab01d6a0B011901ABe",
    "0x178be1df23DD60Bb1d5b01cdcB002E12C65C0041",
    "0xaC86Ab1Ed67b4B851888560D6D4d1Ab024A5d893",
    "0xFB4fDB8Ae3FD14391C094880bdf6b8e271a71820",
    "0xE060082b82F34eE53baBec38f3CD5ED14C14AF2e",
    "0x472Fea5b208bed2fAD3C2C3547c850649E7Dab68",
    "0xF4c7E70eBb1d68b5d3EC2294595ACc9bD4Fd8Add",
    "0xD2D32F1B257c47887d6f503B62a15E707D66793a",
    "0x4872A65f8753d5a26e98c84d56a814119618E43b",
    "0x27981120b6e0721A94cBf20d730bF0984D9921E0",
    "0xa84d245ecbFB634D8F6C15AB96B9382AD44939AD",
    "0x31aeF8A5EcD94F5B9E3d986501fF0f4535Bd3449",
    "0x68FA5B1A9E0ff14614318707c5Fe7efadA8A4D18",
    "0xcA80a4b856464D12fADb38940D0C7B65718524aC",
    "0x6ad526DbC227f9bF1288593a4A24D900b89bb0Ba",
    "0x084B5F3cFf5Bf97Cf56D8a0Fa281Acd67063374c",
    "0x1007FbC5404a5bfd4eaBE1B26D6F9230b58198a2",
    "0x586C0EbbBa2bD7f8097Cba69FD79fdcF6210DD6B",
    "0xA70067529e952b1f67b9436f4668C6C0651F4F2c",
    "0xA771b9f5B1C7F7F0Df7Fe0E374d48D1D0Bf1F212",
    "0x078103E2c50D23Bfd052f146f4C088658ec3828A",
    "0x0594142A84aB93AE0Af6835306F3B6BcBe514cC8",
    "0xe09799d4c11B3e0365730962DFd749469C3B3bEE",
    "0xc6FD3c9D20082314731C855C33506Bd253A92072",
    "0xBDf12B6f4F6A65952E88e73a710b49D284aB77Bf",
    "0x06BCd994c511bFce15442c5C79eFAC118779E1A1",
    "0x23A1CEB5ED7fB7e0D52000c1467888a1C277A41e",
    "0x25c3BA1aeF1De028D3f323c8Ce600ebB6B325a11",
    "0x72bC977c892500Fca1A9259F552a23Ce874c4eC9",
    "0xF7cF8959A739Df34C89e4F49850950e127f6DE2C"
  ];

  const wallet = event.queryStringParameters && event.queryStringParameters.wallet
  const leafNodes = whitelistAddresses.map(addr => keccak256(addr));
  const merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true});
  const claimingAddress = keccak256(wallet);
  const hexProof = merkleTree.getHexProof(claimingAddress);

  return {
    'statusCode': 200,
    'headers': {
      'Cache-Control': 'no-cache',
      'Content-Type': 'application/json',
    },
    'body': JSON.stringify(hexProof)
  }
}
