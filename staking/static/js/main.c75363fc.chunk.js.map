{"version":3,"sources":["config.js","App.js","reportWebVitals.js","LoadingSpinner.js","nft.js","index.js"],"names":["NFTCONTRACT","STAKINGCONTRACT","moralisapi","createAlchemyWeb3","account","contract","vaultcontract","web3","Web3Alc","moralisapikey","providerOptions","binancechainwallet","package","walletconnect","WalletConnectProvider","options","infuraId","walletlink","WalletLink","appName","rpc","chainId","appLogoUrl","darkMode","web3Modal","Web3Modal","network","theme","cacheProvider","App","state","balance","rawearn","this","setState","show","nftamount","outvalue","target","value","delay","delayedLog","processArray","rwdArray","item","sum","reduce","a","b","formatsum","Number","toFixed","document","getElementById","textContent","Promise","resolve","setTimeout","connect","provider","Web3","send","eth","getAccounts","accounts","Contract","ABI","VAULTABI","methods","tokensOfOwner","call","getstakednfts","balanceOf","getbalance","totalStaked","getTotalStaked","totalPercentage","reward","getReward","numReward","utils","fromWei","String","estimatedRewards","intervalToLevels","interval","levels","scale","map","d","i","slice","c","units","bb","aa","TimeLevels","secondsToString","timeLock","arraynft","Array","from","tokenid","filter","forEach","id","earningInfo","earned","split","earnedrwd","rewardx","numrwd","console","log","push","setApprovalForAll","rawnfts","processClaimit","maxFee","maxPriority","claim","maxFeePerGas","maxPriorityFeePerGas","getMaxPriorityFeePerGas","then","tip","getBlock","block","baseFee","baseFeePerGas","processUnstakeall","unstake","processStakeall","stake","config","axios","get","headers","output","data","result","nfts","all","tokenId","token_id","apicall","className","class","src","width","type","onClick","style","fontFamily","borderRadius","fontWeight","fontSize","color","marginTop","textShadow","for","Button","backgroundColor","boxShadow","window","location","reload","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","LoadingSpinner","resolveLink","url","includes","replace","NFT","useState","getNfts","getStk","oth_nftstk","getStkNfts","setLoadingState","isLoading","setIsLoading","holder","owner_of","wallet","image","img","JSON","parse","metadata","e","sort","stakednfts","stkid","nftstk","length","xID","apiurl","timeToUnstake","stk_nfts","StakedInfo","timestamp_unstake","unstakeAt","useEffect","callApi","renderUser","display","gridTemplateColumns","columnGap","nft","toLowerCase","indexOf","stakeit","alt","marginLeft","currentTimestamp","Date","now","newDate","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","btn_status","position","top","disabled","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.c75363fc.chunk.js","sourcesContent":["import { createAlchemyWeb3 } from '@alch/alchemy-web3';\r\nexport const NFTCONTRACT = \"0xC1B0d8CF3A5CD833fc35841C9b2e85F8C81cF0B8\";\r\nexport const STAKINGCONTRACT = \"0x249CAc08ae6c0a411Ed29251ea21412037146Aef\";\r\nexport const polygonscanapi = \"https://api-testnet.polygonscan.com/api\";\r\nexport const moralisapi = \"https://deep-index.moralis.io/api/v2/\";\r\nexport const nftpng = \"https://ipfs.io/ipfs/QmQu4zPVL2fSGdy7TR5LtBwvanA5Waox21SGx6zoBiQh8K/\";\r\nexport const Web3Alc = createAlchemyWeb3(\"https://polygon-mumbai.g.alchemy.com/v2/8AX5AP2TU6G45ctsOXNt8K4Fz_BkhhZG\");","import './App.css';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport 'sf-font';\nimport axios from 'axios';\nimport ABI from './ABI.json';\nimport VAULTABI from './VAULTABI.json';\nimport { NFTCONTRACT, STAKINGCONTRACT, polygonscanapi, moralisapi, nftpng } from './config';\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\nimport Web3 from 'web3';\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3';\n\nvar account = null;\nvar contract = null;\nvar vaultcontract = null;\nvar web3 = null;\n\nconst Web3Alc = createAlchemyWeb3(\"https://eth-rinkeby.alchemyapi.io/v2/8AX5AP2TU6G45ctsOXNt8K4Fz_BkhhZG\");\n\nconst moralisapikey = \"2VBV4vaCLiuGu6Vu7epXKlFItGe3jSPON8WV4CrXKYaNBEazEUrf1xwHxbrIo1oM\";\nconst polygonscanapikey = \"DBQX5JUSAVUZRK8CC4IN2UZF9N2HA63P4U\";\n\nconst providerOptions = {\n\tbinancechainwallet: {\n\t\tpackage: true\n\t  },\n\t  walletconnect: {\n\t\tpackage: WalletConnectProvider,\n\t\toptions: {\n\t\t  infuraId: \"3cf2d8833a2143b795b7796087fff369\"\n\t\t}\n\t},\n\twalletlink: {\n\t\tpackage: WalletLink, \n\t\toptions: {\n\t\t  appName: \"Batang Ethereum\", \n\t\t  infuraId: \"3cf2d8833a2143b795b7796087fff369\",\n\t\t  rpc: \"\", \n\t\t  chainId: 4, \n\t\t  appLogoUrl: null, \n\t\t  darkMode: true \n\t\t}\n\t  },\n};\n\nconst web3Modal = new Web3Modal({\n\tnetwork: \"rinkeby\",\n\ttheme: \"dark\",\n\tcacheProvider: true,\n\tproviderOptions \n  });\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tbalance: [],\n\t\t\trawearn: [],\n\t\t};\n\t}\n  \n\thandleModal(){  \n\t\tthis.setState({show:!this.state.show})  \n\t} \n\n\thandleNFT(nftamount) {\n\t\tthis.setState({outvalue:nftamount.target.value});\n  \t}\n\n\nrender() {\n\tconst {balance} = this.state;\n\tconst {outvalue} = this.state;\n  \n\n  const sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n\n  const expectedBlockTime = 10000;\n\n  async function connectwallet() {\n    var provider = await web3Modal.connect();\n    web3 = new Web3(provider);\n    await provider.send('eth_requestAccounts');\n    var accounts = await web3.eth.getAccounts();\n    account = accounts[0];\n    document.getElementById('wallet-address').textContent = account;\n    contract = new web3.eth.Contract(ABI, NFTCONTRACT);\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\n    var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    // document.getElementById('yournfts').textContent = getstakednfts;\n    var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n    document.getElementById('stakedbalance').textContent = getbalance;\n\n    var getTotalStaked = Number(await vaultcontract.methods.totalStaked().call());\n    var totalPercentage = (getTotalStaked / 4000) * 100;\n    document.getElementById('totalStaked').textContent = getTotalStaked;\n    document.getElementById('totalPercentage').textContent = totalPercentage.toFixed(2);\n\n    var getReward = Number(await vaultcontract.methods.reward().call()) / 100;\n    var numReward = Number(web3.utils.fromWei(String(getReward), 'ether'));\n    document.getElementById('tokenReward').textContent = String(numReward + \" BRY\");\n    \n\n    var estimatedRewards = getTotalStaked*getTotalStaked;\n    document.getElementById('estimatedRewards').textContent = String(estimatedRewards + \" BRY\");\n\n\n    const intervalToLevels = (interval, levels) => {\n      const cbFun = (d, c) => {\n        let bb = d[1] % c[0],\n          aa = (d[1] - bb) / c[0];\n        aa = aa > 0 ? aa + c[1] : '';\n    \n        return [d[0] + aa, bb];\n      };\n    \n      let rslt = levels.scale.map((d, i, a) => a.slice(i).reduce((d, c) => d * c))\n        .map((d, i) => ([d, levels.units[i]]))\n        .reduce(cbFun, ['', interval]);\n      return rslt[0];\n    };\n    \n    const TimeLevels = {\n      scale: [24, 60, 60, 1],\n      units: ['d ', 'h ', 'm ', 's ']\n    };\n    const secondsToString = interval => intervalToLevels(interval, TimeLevels);\n\n    var timeLock = Number(await vaultcontract.methods.timeLock().call());\n    document.getElementById('lockinperiod').textContent = secondsToString(timeLock);\n\n\n    const arraynft = Array.from(getstakednfts.map(Number));\n\t\tconst tokenid = arraynft.filter(Number);\n\t\tvar rwdArray = [];\n    tokenid.forEach(async (id) => {\n      var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n      var array = Array.from(rawearn.map(Number));\n      // console.log(array);\n      array.forEach(async (item) => {\n        var earned = String(item).split(\",\")[0];\n        var earnedrwd = Web3.utils.fromWei(earned);\n        var rewardx = Number(earnedrwd).toFixed(2);\n        var numrwd = Number(rewardx);\n        console.log(numrwd);\n        rwdArray.push(numrwd);\n      });\n    });\n    function delay() {\n      return new Promise(resolve => setTimeout(resolve, 300));\n    }\n    async function delayedLog(item) {\n      await delay();\n      var sum = item.reduce((a, b) => a + b, 0);\n      var formatsum = Number(sum).toFixed(2);\n      document.getElementById('earned').textContent = formatsum;\n    }\n    async function processArray(rwdArray) {\n      for (const item of rwdArray) {\n        await delayedLog(item);\n      }\n    }\n    return processArray([rwdArray]);\n  }\n\n  async function verify() {\n    var getstakednfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    // document.getElementById('yournfts').textContent = getstakednfts;\n    var getbalance = Number(await vaultcontract.methods.balanceOf(account).call());\n    document.getElementById('stakedbalance').textContent = getbalance;\n  }\n\n  async function enable() {\n    contract.methods.setApprovalForAll(STAKINGCONTRACT, true).send({ from: account });\n  }\n  async function rewardinfo() {\n    var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    const arraynft = Array.from(rawnfts.map(Number));\n    const tokenid = arraynft.filter(Number);\n    var rwdArray = [];\n    tokenid.forEach(async (id) => {\n      var rawearn = await vaultcontract.methods.earningInfo(account, [id]).call();\n      var array = Array.from(rawearn.map(Number));\n      array.forEach(async (item) => {\n        var earned = String(item).split(\",\")[0];\n        var earnedrwd = Web3.utils.fromWei(earned);\n        var rewardx = Number(earnedrwd).toFixed(2);\n        var numrwd = Number(rewardx);\n        rwdArray.push(numrwd)\n      });\n    });\n    function delay() {\n      return new Promise(resolve => setTimeout(resolve, 300));\n    }\n    async function delayedLog(item) {\n      await delay();\n      var sum = item.reduce((a, b) => a + b, 0);\n      var formatsum = Number(sum).toFixed(2);\n      document.getElementById('earned').textContent = formatsum;\n    }\n    async function processArray(rwdArray) {\n      for (const item of rwdArray) {\n        await delayedLog(item);\n      }\n    }\n    return processArray([rwdArray]);\n  }\n\n  async function claimit() {\n    var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    const arraynft = Array.from(rawnfts.map(Number));\n    const tokenid = arraynft.filter(Number);\n\n    async function processClaimit(tokenid,maxFee,maxPriority) {\n      await vaultcontract.methods.claim(tokenid)\n          .send({\n            from: account,\n            maxFeePerGas: maxFee,\n            maxPriorityFeePerGas: maxPriority\n          })\n    }\n\n\n    await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n      Web3Alc.eth.getBlock('pending').then((block) => {\n        var baseFee = Number(block.baseFeePerGas);\n        var maxPriority = Number(tip);\n        var maxFee = maxPriority + baseFee;\n        processClaimit(tokenid,maxFee,maxPriority);\n      });\n    })\n  }\n\n  async function unstakeall() {\n    var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    const arraynft = Array.from(rawnfts.map(Number));\n    const tokenid = arraynft.filter(Number);\n\n    async function processUnstakeall(tokenid,maxFee,maxPriority) {\n      await vaultcontract.methods.unstake(tokenid)\n        .send({\n          from: account,\n          maxFeePerGas: maxFee,\n          maxPriorityFeePerGas: maxPriority\n        })\n    }\n    \n    await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n      Web3Alc.eth.getBlock('pending').then((block) => {\n        var baseFee = Number(block.baseFeePerGas);\n        var maxPriority = Number(tip);\n        var maxFee = maxPriority + baseFee;\n        processUnstakeall(tokenid,maxFee,maxPriority);\n      });\n    })\n  }\n\n  async function stakeall() {\n    let config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\n    const nfts = await axios.get((moralisapi + `${account}/nft/${NFTCONTRACT}/?chain=rinkeby&format=decimal`), {headers: config})\n    .then(output => {\n        const { result } = output.data\n        return result;\n      })\n    const apicall = await Promise.all(nfts.map(async i => {\n      let  tokenId = i.token_id\n      return tokenId\n    }))\n\n    var rawnfts = await vaultcontract.methods.tokensOfOwner(account).call();\n    const arraynft = Array.from(apicall.map(Number));\n    const tokenid = arraynft.filter(Number);\n    \n    async function processStakeall(tokenid,maxFee,maxPriority) {\n      await vaultcontract.methods.stake(tokenid)\n        .send({\n          from: account,\n          maxFeePerGas: maxFee,\n          maxPriorityFeePerGas: maxPriority\n        })\n    }\n\n    await Web3Alc.eth.getMaxPriorityFeePerGas().then((tip) => {\n      Web3Alc.eth.getBlock('pending').then((block) => {\n        var baseFee = Number(block.baseFeePerGas);\n        var maxPriority = Number(tip);\n        var maxFee = maxPriority + baseFee;\n        processStakeall(tokenid,maxFee,maxPriority)\n      });\n    })\n  }\n\nconst refreshPage = ()=>{\n  window.location.reload();  \n}\n\n  return (\n    <div className=\"App nftapp\">\n        <nav class=\"navbar navbarfont navbarglow navbar-expand-md navbar-dark bg-dark mb-4 justify-content-between\">\n          <a class=\"navbar-brand px-5\"><img src=\"logo2.png\" width=\"18%\"/></a>\n          <form class=\"form-inline px-5\">\n          <input id=\"connectbtn\" type=\"button\" className=\"connectbutton\" onClick={connectwallet} style={{ fontFamily: \"SF Pro Display\" }} value=\"Connect Your Wallet\" />\n          </form>\n        </nav>\n        <div className='container'>\n          \n        <div className='col'>\n          <body className='nftstaker border-0'>\n            <form  style={{ fontFamily: \"SF Pro Display\" }} > \n\n              <div className=\"nft-portal\">\n                <h2 style={{ borderRadius: '14px', fontWeight: \"300\", fontSize: \"25px\" }}>Batang Ethereum Staking Vault: \n                  <span style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '25px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}> \n                    <span id=\"totalStaked\">0</span>/4000 (<span id=\"totalPercentage\">0.00</span>%)\n                  </span>\n                </h2>\n                <div className=\"pb-3\" id='wallet-address' style={{\n                  color: \"#39FF14\",\n                  fontWeight: \"400\",\n                  textShadow: \"1px 1px 1px black\",\n                }}>\n                  <label for=\"floatingInput\">Please Connect Wallet</label>\n                </div>\n                <h6 style={{ fontWeight: \"300\" }}>First time staking?</h6>\n                <Button className=\"btn\" onClick={enable} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }} >Authorize Your Wallet</Button>\n              </div>\n              \n              \n              <div className=\"row px-3\">\n                <div className=\"col\">\n                  <form class=\"stakingrewards\" style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #ffffff\" }}>\n                    <h5 style={{ color: \"#FFFFFF\", fontWeight: '300' }}>Your Vault Activity</h5>\n                    <h6 style={{ color: \"#FFFFFF\" }}>Verify Staked Amount</h6>\n                    <Button onClick={verify} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }} >Verify</Button>\n                    <table className='table mt-3 mb-5 px-3 table-dark'>\n                      {/* <tr>\n                        <td style={{ fontSize: \"19px\" }}>Your Staked NFTs:\n                          <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#39FF14\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='yournfts'></span>\n                        </td>\n                      </tr> */}\n                      <tr>\n                        <td style={{ fontSize: \"19px\" }}>Total Staked NFTs:</td>\n                      </tr>\n                      <tr>\n                        <td style={{ fontSize: \"19px\" }}>\n                          <span style={{ backgroundColor: \"#ffffff00\", fontSize: \"21px\", color: \"#39FF14\", fontWeight: \"500\", textShadow: \"1px 1px 2px #000000\" }} id='stakedbalance'></span>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style={{ fontSize: \"19px\" }}>\n                          <Button onClick={stakeall} className='mb-3' style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }}>Stake All Unstake NFTs</Button>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td style={{ fontSize: \"19px\" }}>\n                          <Button onClick={unstakeall} className='mb-3' style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }}>Unstake All Staked NFTs</Button>\n                        </td>\n                      </tr>\n                    </table>\n                  </form>\n                  </div>\n                  <img className=\"col-lg-4\" src=\"DRmimoy.png\"/>\n                  <div className=\"col\">\n                    <form className='stakingrewards' style={{ borderRadius: \"25px\", boxShadow: \"1px 1px 15px #ffffff\", fontFamily: \"SF Pro Display\" }}>\n                      <h5 style={{ color: \"#FFFFFF\", fontWeight: '300' }}> Staking Rewards: <span id=\"tokenReward\" style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '25px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}>0 BRY</span>/day</h5>\n                      <Button onClick={rewardinfo} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }} >Earned BRY Rewards</Button>\n                      <div id='earned' style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '25px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}><p style={{ fontSize: \"20px\" }}>Earned Tokens</p></div>\n                      <div className='col-12 mt-2'>\n                        <Button onClick={claimit} style={{ backgroundColor: \"#ffffff10\", boxShadow: \"1px 1px 5px #000000\" }} className=\"mb-2\">Claim Rewards</Button>\n                      </div>\n                      <h5 style={{ color: \"#FFFFFF\", fontWeight: '300' }}> Lock in period: <span id=\"lockinperiod\" style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '25px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}>0m</span></h5>\n                      <h5 style={{ color: \"#FFFFFF\", fontWeight: '300' }}> Estimated Rewards: <span id=\"estimatedRewards\" style={{ color: \"#39FF14\", marginTop: \"5px\", fontSize: '25px', fontWeight: '500', textShadow: \"1px 1px 2px #000000\" }}>0 BRY</span>/month</h5>\n                    </form>\n                  </div>\n                </div>\n            </form>\n          </body>\n        </div>\n      </div>\n      <div className='row nftportal mt-3'>\n        \n      <div className='col nft-portal'>\n        <h1 className='n2dtitlestyle mt-3'>Your NFT Portal</h1>\n      <Button onClick={refreshPage} style={{ backgroundColor: \"#161616\", boxShadow: \"1px 1px 5px #000000\" }}>Refresh NFT Portal</Button>\n      </div>\n      \n      </div>\n      </div>\n    )\n  }\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport \"./spinner.css\";\r\n\r\nexport default function LoadingSpinner() {\r\n  return (\r\n    <div className=\"spinner-container\">\r\n      <div className=\"loading-spinner\"></div>\r\n    </div>\r\n  );\r\n}","import './App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport { useEffect, useState } from 'react'\r\nimport 'sf-font';\r\nimport axios from 'axios';\r\nimport VAULTABI from './VAULTABI.json';\r\nimport { NFTCONTRACT, STAKINGCONTRACT, moralisapi, nftpng } from './config';\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3 from 'web3';\r\nimport LoadingSpinner from \"./LoadingSpinner\";\r\nimport\"./styles.css\";\r\n\r\nvar web3 = null;\r\nvar account = null;\r\nvar vaultcontract = null;\r\n\r\nconst moralisapikey = \"uyuRq8z2puSF57Su8FOeYfAVOdCGIo8VqpaajygnRWNQ3MflJef4nFItmvSxGXsA\";\r\nconst providerOptions = {\r\n\tbinancechainwallet: {\r\n\t\tpackage: true\r\n\t  },\r\n\t  walletconnect: {\r\n\t\tpackage: WalletConnectProvider,\r\n\t\toptions: {\r\n\t\t  infuraId: \"3cf2d8833a2143b795b7796087fff369\"\r\n\t\t}\r\n\t},\r\n\twalletlink: {\r\n\t\tpackage: WalletLink, \r\n\t\toptions: {\r\n\t\t  appName: \"Net2Dev NFT Minter\", \r\n\t\t  infuraId: \"3cf2d8833a2143b795b7796087fff369\",\r\n\t\t  rpc: \"\", \r\n\t\t  chainId: 4, \r\n\t\t  appLogoUrl: null, \r\n\t\t  darkMode: true \r\n\t\t}\r\n\t  },\r\n};\r\n\r\nconst web3Modal = new Web3Modal({\r\n\tnetwork: \"rinkeby\",\r\n\ttheme: \"dark\",\r\n\tcacheProvider: true,\r\n\tproviderOptions \r\n  });\r\n\r\nconst resolveLink = (url) => {\r\n  if (!url || !url.includes(\"ipfs://\")) return url;\r\n  return url.replace(\"ipfs://\", \"https://gateway.ipfs.io/ipfs/\");\r\n};\r\n\r\nexport default function NFT() {\r\n  const [apicall, getNfts] = useState([])\r\n  const [nftstk, getStk] = useState([])\r\n  const [oth_nftstk, getStkNfts] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded')\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    callApi()\r\n  }, [])\r\n\r\n  async function callApi() {\r\n    var provider = await web3Modal.connect();\r\n    web3 = new Web3(provider);\r\n    await provider.send('eth_requestAccounts');\r\n    var accounts = await web3.eth.getAccounts();\r\n    account = accounts[0];\r\n    vaultcontract = new web3.eth.Contract(VAULTABI, STAKINGCONTRACT);\r\n\r\n\t\tlet config = {'X-API-Key': moralisapikey, 'accept': 'application/json'};\r\n\t\tconst nfts = await axios.get((moralisapi + `${account}/nft/${NFTCONTRACT}/?chain=rinkeby&format=decimal`), {headers: config})\r\n    .then(output => {\r\n        const { result } = output.data\r\n        return result;\r\n      })\r\n    const apicall = await Promise.all(nfts.map(async i => {\r\n      let item = {\r\n        tokenId: i.token_id,\r\n        holder: i.owner_of,\r\n        wallet: account,\r\n        image: \"\",\r\n      }\r\n\r\n      try {\r\n        let img = resolveLink(JSON.parse(i.metadata).image);\r\n\r\n        item = {\r\n          tokenId: i.token_id,\r\n          holder: i.owner_of,\r\n          wallet: account,\r\n          image: img,\r\n        }\r\n\r\n      } catch(e){\r\n        console.log(e)\r\n      }\r\n      \r\n      console.log(item)\r\n      return item\r\n    }))\r\n\r\n    apicall.sort(function(a, b) {\r\n      return a.tokenId - b.tokenId;\r\n    });\r\n\r\n\r\n\r\n    const stakednfts = await vaultcontract.methods.tokensOfOwner(account).call()\r\n    .then(id => {\r\n      return id;\r\n    })\r\n\r\n    const nftstk = await Promise.all(stakednfts.map(async i => {\r\n      let stkid = {\r\n        tokenId: i,\r\n      }\r\n      return stkid\r\n    }))\r\n\r\n\r\n    nftstk.sort(function(a, b) {\r\n      return a.tokenId - b.tokenId;\r\n    });\r\n\r\n\r\n    const oth_nftstk = [];\r\n\r\n    console.log(nftstk.length);\r\n    setIsLoading(true);\r\n    for (let i = 0; i < nftstk.length; i++){\r\n      let xID = nftstk[i];\r\n      let apiurl = (moralisapi + `nft/${NFTCONTRACT}/${xID.tokenId}?chain=rinkeby&format=decimal`);\r\n      let image = \"\";\r\n      let holder = \"\";\r\n      let timeToUnstake = \"\";\r\n      try{\r\n        const stk_nfts = await axios.get(apiurl, {headers: config})\r\n        .then(output => {\r\n          return output.data;\r\n        })\r\n        image = resolveLink(JSON.parse(stk_nfts.metadata).image);\r\n        holder = stk_nfts.owner_of;\r\n\r\n        const timestamp_unstake = await vaultcontract.methods.StakedInfo(account,[xID.tokenId]).call()\r\n        .then(id => {\r\n          return id;\r\n        })\r\n\r\n        const unstakeAt = await Promise.all(timestamp_unstake.map(async i => {\r\n          let stkid = i;\r\n          return stkid\r\n        }))\r\n\r\n        timeToUnstake = unstakeAt[0];\r\n\r\n\r\n      } catch (e){\r\n        console.log(e)\r\n      }\r\n      \r\n      let metadata = {\r\n          tokenId: xID.tokenId,\r\n          holder: holder,\r\n          image: image,\r\n          unstakeAt: timeToUnstake,\r\n        }\r\n        oth_nftstk.push(metadata);\r\n      }\r\n\r\n    console.log(\"ERROR:\" ,oth_nftstk)\r\n    setIsLoading(false);\r\n    \r\n      getNfts(apicall)\r\n      getStk(nftstk)\r\n      getStkNfts(oth_nftstk)\r\n      setLoadingState('loaded')\r\n    } \r\n    // if (loadingState === 'loaded' && !apicall.length) \r\n    // return (\r\n    //       <h1 className=\"text-3xl\">Wallet Not Connected</h1>)\r\n    const renderUser = (\r\n        <div className='nftportal mb-4'>\r\n            <div className=\"container col-lg-11\">\r\n              <div className=\"row items px-3 pt-3\">\r\n                <div className=\"ml-3 mr-3\" style={{ display: \"inline-grid\", gridTemplateColumns: \"repeat(4, 5fr)\", columnGap: \"20px\" }}>\r\n                  {/* <h1 id=\"loadingnft\" className=\"text-3xl\">Loading your NFTs...</h1> */}\r\n                  {apicall.map((nft, i) => {\r\n                    var image = nft.image;\r\n                    \r\n                    var owner = nft.wallet.toLowerCase();\r\n                      if (owner.indexOf(nft.holder) !== -1) {\r\n                    async function stakeit() {\r\n                      vaultcontract.methods.stake([nft.tokenId]).send({ from: account });\r\n                    }\r\n                    return (\r\n                      <div className=\"card nft-card mt-3 mb-3\" key={i} >\r\n                        <div className=\"image-over\">\r\n                          <img className=\"card-img-top\" src={image} alt=\"\" />\r\n                        </div>\r\n                        <div className=\"card-caption col-12 p-0\">\r\n                          <div className=\"card-body\">\r\n                            <h5 className=\"mb-0\">Batang Ethereum #{nft.tokenId}</h5>\r\n                            <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#39FF14\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Ready to Stake</p></h5>\r\n                            <div className=\"card-bottom d-flex justify-content-between\">\r\n                              <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                              <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={stakeit}>Stake it</Button>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )}})}\r\n\r\n                    {oth_nftstk.map((nft, i) => {\r\n                      var image = nft.image;\r\n                      var currentTimestamp = Date.now()\r\n                      var newDate = nft.unstakeAt * 1000;\r\n                      var unstakeAt = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(newDate)\r\n                      var btn_status = true;\r\n\r\n                      if (currentTimestamp >= newDate){\r\n                        btn_status = false;\r\n                      } \r\n                      \r\n                      async function unstakeit() {\r\n                        vaultcontract.methods.unstake([nft.tokenId]).send({ from: account });\r\n                      }\r\n                      return (\r\n                        <div>\r\n                        \r\n                        <div className=\"card stakedcard mt-3 mb-3\" key={i} >\r\n                          <div className=\"image-over\">\r\n                          <img style={{position:'absolute',top:'0.05rem',width:'90px'}} src='stakeicon2.png'></img>\r\n                            <img className=\"card-img-top\" src={image} alt=\"\" />\r\n                          </div>\r\n                          <div className=\"card-caption col-12 p-0\">\r\n                            <div className=\"card-body\">\r\n                              <h5 className=\"mb-0\">Batang Ethereum #{nft.tokenId}</h5>\r\n                              <h5 className=\"mb-0 mt-2\">Status<p style={{ color: \"#15F4EE\", fontWeight: \"bold\", textShadow: \"1px 1px 2px #000000\" }}>Currently Staked</p></h5>\r\n                              <div className=\"card-bottom d-flex justify-content-between\">\r\n                                <input key={i} type=\"hidden\" id='stakeid' value={nft.tokenId} />\r\n                                <Button style={{ marginLeft: '2px', backgroundColor: \"#ffffff10\" }} onClick={unstakeit} disabled={btn_status}>\r\n                                  Unstake it at: {unstakeAt}\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        </div>\r\n                      )})}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n          <div className=\"spinner\">\r\n            {isLoading ? <LoadingSpinner /> : renderUser}\r\n          </div>\r\n        );\r\n    }\r\n    ","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Routes, Route } from \"react-router-dom\";\nimport Nft from './nft';\n\n<Routes>\n<Route path=\"/nft\" element={<Nft />} />\n</Routes>\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  \n  <React.StrictMode>\n    <App />\n    <Nft />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}